set previewer ~/.config/lf/lf_kitty_preview
set cleaner ~/.config/lf/lf_kitty_clean


# Basic Settings
set hidden true
set ignorecase true
set icons true

# Custom Functions
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}

cmd z-jump ${{
  # ZLUA_SCRIPT="/path/to/z.lua"  # Usually unnecessary
  lf -remote "send ${id} cd \"$($ZLUA_SCRIPT -e $@ | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}
map Z push :z-jump<space>-I<space>
map zb push :z-jump<space>-b<space>
map zz push :z-jump<space>

cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd | sed 's/\\/\\\\/g;s/"/\\"/g')
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}


# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1


# Archive bindings
cmd archive ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.rar) unrar x "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

  set -f
     printf "$fx\n"
     printf "Put this into Trash?[y/n]"
     read ans
     [ "$ans" = "y" ] && trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

cmd trash_delete ${{
  trash-list && trash-empty
}}

# Bindings
map d
map m

map au unarchive
map aa archive
map c $code "$f"
map E $$f

# Basic Functions
map ` shell
map . set hidden!
map dd trash
map dr restore_trash
map dt trash_delete

map p paste
map x cut
map y copy
map <enter> open
map R reload
map mf mkfile
map md mkdir
map C clear
map <f-2> push :rename<space>

#git commands 
map gb :git_branch
map gp ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gs ${{clear; git status; echo "press ENTER"; read ENTER}}
map gl ${{clear; git log --graph --pretty=format:'%Cred%h% Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}


# Movement
map dgh cd ~/
map dgD cd ~/Documents
map dgd cd ~/Downloads
map dgp cd ~/Pictures
map dgc cd ~/.config
map dgr cd ~/repos
map dgv cd ~/videos
map dgs cd ~/.local/bin
map dgt cd ~/.local/share/Trash/files
